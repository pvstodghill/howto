#! /usr/bin/env perl

use strict;
use feature 'postderef';
use warnings FATAL => 'all';
no warnings "experimental::postderef";
# use Carp::Always;

use English;
use Cwd 'abs_path';

use constant { TRUE => 1, FALSE => 0 };

# ------------------------------------------------------------------------

my ($_gid) = split(/ /,$GID);
my $_uid = $UID;

our $default_attibutes = {
			gui => "false",
			implicit => "false",
			java => "false",
			pvs => "false",
			tty => "false",
			user => join(":",$_uid,$_gid),
		       };

# ------------------------------------------------------------------------
# Read command line
# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_T = $ENV{HOWTO_TMPDIR} || "/tmp";
our $opt_b = $ENV{HOWTO_BACKEND} || "singularity";
our $opt_c;
our $opt_e = "";
our $opt_f;
our $opt_h;
our $opt_l;
our $opt_m = $ENV{HOWTO_MOUNT_DIR} || ".";
our $opt_n;
our $opt_p;
our $opt_q;
our $opt_s;
our $opt_t;
our $opt_v;

our $conda_cmd = $ENV{HOWTO_CONDA_CMD} || "conda";
our $docker_cmd = $ENV{HOWTO_DOCKER_CMD} || "docker";
our $singularity_cmd = $ENV{HOWTO_SINGULARITY_CMD} || "singularity";

sub usage {
  my $progname = basename($0);
  print STDERR "Usage: $progname [options] cmd args ...\n";
  print STDERR "Usage: $progname [options] -l\n";
  print STDERR "Usage: $progname [options] -p cmd1 cmd2\n";
  print STDERR "Usage: $progname [options] -p '*'\n";

  print STDERR "-T TMPDIR - mount TMDIR as /tmp [$opt_T]\n";
  print STDERR "-b BACKEND - \"docker\", \"singularity\" [$opt_b]\n";
  print STDERR "-c alt_cmd - use image for alt_cmd to run cmd\n";
  print STDERR "-e VAR1,VAR2,... - export values of environment variables VAR1,VAR2,... to docker\n";
  print STDERR "-f FILENAME - config file [./.howto.yaml or ~/.howto.yaml]\n";
  print STDERR "-h - print help\n";
  print STDERR "-l - list known commands and images\n";
  print STDERR "-m DIR - mount directory tree DIR [\$HOWTO_MOUNT_DIR or \".\"]\n";
  print STDERR "-n - dryrun. print but do not execute commands. implies -v\n";
  print STDERR "-p - pull packages\n";
  print STDERR "-q - quiet, suppress all output\n";
  print STDERR "-s - open a shell instead of running the command\n";
  print STDERR "-t - ensure a tty (do not use with piped io)\n";
  print STDERR "-v - be verbose\n";

  exit(@_);
}

my $stat = getopts('T:b:c:e:f:hlm:npqstv');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}

if ( $opt_n ) {
  $opt_v = TRUE;
}

sub normalize_backend {
  my ($raw) = @_;
  my $s = lc($raw);
  return $s if ($s eq "docker");
  return $s if ($s eq "singularity");
  die;
  print STDERR "Invalid backend: <<$raw>>\n";
  exit 1;
}

if ($opt_b) {
  $opt_b = normalize_backend($opt_b);
}

# ------------------------------------------------------------------------
# Figure out mount and working directories
# ------------------------------------------------------------------------

our $tmp_path = abs_path($opt_T) if (defined($opt_T));
our $mount_path = abs_path($opt_m);
our $cwd_path = abs_path($ENV{PWD});

if ( 0 != index($cwd_path,$mount_path) ) {
  print STDERR "Mount dir must be a parent of the pwd.\n";
  exit 1;
}

my @mount_stat_results = stat($mount_path);
my $mount_uid = $mount_stat_results[4];

if ( $mount_uid != $UID ) {
  print STDERR "Mount dir must be owned by current user.\n";
  exit 1;
}

our $cwd_suffix = substr($cwd_path,length($mount_path));

# ------------------------------------------------------------------------
# Creating and registering commands
# ------------------------------------------------------------------------

my $commands = {};

sub bool {
  my ($s) = @_;
  return TRUE if (lc($s) eq "true");
  return FALSE if (lc($s) eq "false");
  die "Unexpected boolean: <<$s>>,";
}

sub create_command {
  my ($collection,$collection_element,$command_element) = @_;

  my $command_name;
  my $z;
  my $ref_type = ref $command_element;
  if ( !$ref_type ) {
    $command_name = $command_element;
    $z = {};
  } elsif ( $ref_type eq "HASH" ) {
    my ($name,$null) = keys %$command_element;
    if (!defined($name) || defined($null)) {
      die "Ill-formed command element,";
    }
    $command_name = $name;
    $z = $command_element->{$name};
  } else {
    die "Unexpected $ref_type element,"
  }

  if (defined($commands->{$command_name})) {
    die "Duplicate command: <<$command_name>>,";
  }

  my $attrs = {
	       name => $command_name,
	       collection => $collection,
	      };

  foreach my $attr ("gui", "implicit", "java", "tty") {
    if ($z->{$attr}) {
      $attrs->{$attr} = bool($z->{$attr});
    } elsif ($collection_element->{$attr}) {
      $attrs->{$attr} = bool($collection_element->{$attr});
    } elsif ($::default_attibutes->{$attr}) {
      $attrs->{$attr} = bool($::default_attibutes->{$attr});
    }
  }

  foreach my $attr ("user") {
    if ($z->{$attr}) {
      $attrs->{$attr} = $z->{$attr};
    } elsif ($collection_element->{$attr}) {
      $attrs->{$attr} = $collection_element->{$attr};
    } elsif ($::default_attibutes->{$attr}) {
      $attrs->{$attr} = $::default_attibutes->{$attr};
    }
  }

  $commands->{$command_name} = $attrs;
}




# ------------------------------------------------------------------------
# "Base" collection of commands
# ------------------------------------------------------------------------

sub cleanup {
  my ($s) = @_;
  $s =~ s/#.*//;
  $s =~ s/^[ \t]+//;
  $s =~ s/[ \t]+$//;
  if ($s =~ /[ \t]+/) {
    print STDERR "WARNING: white space in keyword <<$s>>\n";
  }
  return $s;
}

package Collection {

  use strict;

  sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;
    $self->_initialize(@_);
    return $self;
  }

  sub _initialize {
    my ($self,$element) = @_;

    my @raw_commands = ();

    if ( $element->{command} ) {
      @raw_commands = ($element->{command});
    } elsif ( $element->{commands} ) {
      @raw_commands = @{$element->{commands}}
    }

    foreach my $raw_command ( @raw_commands ) {
      ::create_command($self,$element,$raw_command);
    }
  }

  sub name {
    my ($self) = @_;
    return $self->{name};
  }

  1;
};

# ------------------------------------------------------------------------
# Collection of native commands
# ------------------------------------------------------------------------

package NativeCollection {

  use strict;

  our @ISA = qw(Collection);

  sub _initialize {
    my ($self,$element) = @_;
    $self->SUPER::_initialize($element);

    $self->{backend} = "native";
    
    ($element->{native}) || die;
    $self->{name} = ::cleanup($element->{native});
  }

  sub do_pull {
    my ($self) = @_;
    # noop;
    1;
  }

  sub do_exec {
    my ($self,$command,@exec_command_line) = @_;
    return ::run(@exec_command_line);
  }

  1;
};

# ------------------------------------------------------------------------
# Collection of conda commands
# ------------------------------------------------------------------------

package CondaCollection {

  use strict;

  our @ISA = qw(Collection);

  sub _initialize {
    my ($self,$element) = @_;
    $self->SUPER::_initialize($element);

    $self->{backend} = "conda";
    $self->{environment} = ::cleanup($element->{environment});
    $self->{name} = "conda:".$self->{environment};
    if ($element->{packages}) {
      $self->{packages} = [ split(" ",$element->{packages}) ];
    } else {
      my $version = "";
      if ($element->{version}) {
	$version = $element->{version};
	if ($version !~ /^[<=>!]/) {
	  $version = "=".$version;
	}
      }
      $self->{packages} = [ $self->{environment}.$version ];
    }
  }

  sub _set_conda_base {
    my ($self) = @_;

    if ($self->{conda_base}) { return; }
    $self->{conda_base} = `$::conda_cmd info --base 2>/dev/null`;
    if ($? != 0) {
      die "Cannot determine conda base";
    }
    chomp $self->{conda_base};
  }

  sub do_pull {
    my ($self) = @_;

    # This is the slow version:
    # # this is pretty bogus
    # `$::conda_cmd run -n $self->{environment} true 2>/dev/null`;
    # if ($? == 0) {
    #   return;
    # }

    # This is the cheater version.
    $self->_set_conda_base;
    if ( -e $self->{conda_base}."/envs/".$self->{environment} ) {
      return;
    }

    return ::run($::conda_cmd,"create","-y","--name",$self->{environment},
    		 @{$self->{packages}});
  }

  sub do_exec {
    my ($self,$command,@exec_command_line) = @_;

    $self->do_pull;

    # # This is the slow version:
    # return ::run($::conda_cmd,"run","-n",$self->{environment},
    # 		 @exec_command_line);

    # This is the cheater version.
    $self->_set_conda_base;
    my $bindir=$self->{conda_base}."/envs/".$self->{environment}."/bin";

    $ENV{PATH} = $bindir.":".$ENV{PATH};
    return ::run(@exec_command_line);
  }

  1;
};

# ------------------------------------------------------------------------
# Collection of Docker commands
# ------------------------------------------------------------------------

package DockerCollection {

  use strict;

  our @ISA = qw(Collection);

  sub _initialize {
    my ($self,$element) = @_;
    $self->SUPER::_initialize($element);
    $self->{backend} = "docker";
        ($element->{image}) || die;
    $self->{image} = ::cleanup($element->{image});
    $self->{version} = ::cleanup($element->{version} || "latest");
    $self->{name} = $self->{image}.":".$self->{version};
  }

  sub do_pull {
    my ($self) = @_;
    if ($self->{pulled}) {
      return;
    }
    $self->{pulled} = ::TRUE;

    my $image = $self->{name};
    my $stat = ::run($docker_cmd,"pull",$image);
    if ( $stat != 0 ) {
      return $stat;
    }
  }

  sub do_exec {
    my ($self,$command,@exec_command_line) = @_;

    my @docker_args;

    if ( $command->{pvs} || $self->{image} =~ /^pvstodghill\// ) {
      # Mount the current directory as container:/mnt
      push @docker_args, "-v", $mount_path.":/mnt";
      if ( $::tmp_path ) {
	push @docker_args, "-v", $tmp_path.":/tmp";
      }
      push @docker_args, "-w", "/mnt".$::cwd_suffix;
    }
    push @docker_args, "--user", $command->{user};

    # set TERM
    push @docker_args, "-e", "TERM=".$ENV{TERM};
    # Don't log. It fills the disk.
    push @docker_args, "--log-driver=none";
    # Delete the container when finished.
    push @docker_args, "--rm";
    # so piping commands work
    push @docker_args, "-i";
    # run interactively
    if ( $::opt_s || $::opt_t || $command->{tty} ) {
      push @docker_args, "-t";
    }
    # For Java commands, pass Java flags
    if ( $command->{java} ) {
      my $JVM_FLAGS=$ENV{JVM_FLAGS};
      if ( defined($JVM_FLAGS) ) {
	push @docker_args, "-e", "\"JVM_FLAGS=$JVM_FLAGS\""
      }
    }
    # For GUI commands, pass X11 flags
    if ( $command->{gui} ) {
      my $DISPLAY = $ENV{DISPLAY};
      ( defined($DISPLAY) ) || die "GUI command, but \$DISPLAY is not set,";
      if ( $::OSNAME eq "linux" ) {
	push @docker_args, "-e", "DISPLAY=$DISPLAY";
	push @docker_args, "-v", "/tmp/.X11-unix:/tmp/.X11-unix";
      } elsif ( $::OSNAME eq "darwin" ) {
	push @docker_args, darwin_x11_args();
      } else {
	die "Cannot start GUI commands on <<$::OSNAME>>,";
      }
    }
    # export the variables
    foreach my $var ( split(/,/, $::opt_e) ) {
      # fixme: should value better quoted?
      push @docker_args, "-e", ($var."=".$ENV{$var});
    }

    my $image_version = $self->{name};

    if ($command->{implicit}) {
      shift @exec_command_line;
    }

    my $error = ::run($::docker_cmd, "run", @docker_args, $image_version, @exec_command_line);

    return $error;
  }

  1;
};

# ------------------------------------------------------------------------
# Collection of Singularity commands
# ------------------------------------------------------------------------

package SingularityCollection {

  use strict;

  our @ISA = qw(DockerCollection);

  use File::Temp qw{:mktemp};

  sub _initialize {
    my ($self,$element) = @_;
    $self->SUPER::_initialize($element);
    $self->{backend} = "singularity";
  }

  sub do_pull {
    my ($self) = @_;
    if ($self->{pulled}) {
      return;
    }
    $self->{pulled} = ::TRUE;

    my $image = "docker://".$self->{name};

    # this is not ideal...
    my $temp_sif = mktemp( "/tmp/howtoXXXXX" );

    my @silent_arg = $::opt_q ? ("-s") : ();
    my $stat = ::run($::singularity_cmd,@silent_arg,"pull",$temp_sif, $image);

    unlink($temp_sif);

    if ( $stat != 0 ) {
      return $stat;
    }

  }

  sub do_exec {
    my ($self,$command,@exec_command_line) = @_;

    my @singularity_args;

    if ( $command->{pvs} || $self->{image} =~ /^pvstodghill\// ) {
      push @singularity_args, "-e"; # clean environment
      # Mount the current directory as container:/mnt
      push @singularity_args, "-c"; # use minimal /dev
      push @singularity_args, "-B", $mount_path.":/mnt";
      if ( $::tmp_path ) {
	push @singularity_args, "-B", $::tmp_path.":/tmp";
      }
      push @singularity_args, "-H", $mount_path.":/mnt";
      push @singularity_args, "--pwd", "/mnt".$cwd_suffix;
    }

    # not needed?
    # if ( $command->{gui} ) {
    #   my $DISPLAY = $ENV{DISPLAY};
    #   ( defined($DISPLAY) ) || die "GUI command, but \$DISPLAY is not set,";
    #   push @singularity_args, "-B", "/tmp/.X11-unix:/tmp/.X11-unix";
    #   @exec_command_line = ( "env", "DISPLAY=$DISPLAY", @exec_command_line );
    # }

    if ($command->{implicit}) {
      shift @exec_command_line;
    }

    $ENV{LC_ALL} = 'C';
    my $image_version = "docker://".$self->{name};

    my @silent_arg = $::opt_q ? ("-s") : ("-q");
    my $error = ::run($singularity_cmd, @silent_arg, "run", @singularity_args, $image_version,
		      @exec_command_line);

    return $error;
  }

  1;
};

# ------------------------------------------------------------------------
# Read and parse config file
# ------------------------------------------------------------------------

my $config_file;
if ( $opt_f ) {
  ( -r $opt_f ) || die "Cannot read <<$opt_f>>,";
  $config_file = $opt_f;
} else {
  foreach my $file ( "howto.yaml", ".howto.yaml" , "$ENV{HOME}/.howto.yaml" ) {
    if ( -r $file ) {
      $config_file = $file;
      last;
    }
  }
}
if ( !$config_file ) {
  die "Cannot find config file,";
}

use YAML;

my @config_elements = YAML::LoadFile($config_file);

my @all_collections;

foreach my $x ( @config_elements ) {
  my $ref_type = ref $x;
  if ( !$ref_type ) {
    die "Unexpected scalar element: <<$x>>,";
  } elsif ( $ref_type eq "HASH" ) {
    # nothing
  } else {
    die "Unexpected $ref_type element,"
  }

  my $collection;
  if ($x->{image}) {
    my $backend;
    if ($x->{backend}) {
      $backend = normalize_backend($x->{backend});
    } else {
      $backend = $opt_b;
    }
    $collection = DockerCollection->new($x) if ($backend eq "docker");
    $collection = SingularityCollection->new($x) if ($backend eq "singularity");
  } elsif ($x->{environment}) {
    $collection = CondaCollection->new($x)
  } elsif ($x->{native}) {
    $collection = NativeCollection->new($x)
  } else {
    die "unrecognized collection: ...";
  }

  push @all_collections, $collection;
}

# ------------------------------------------------------------------------

sub do_list {
  foreach my $command_name (sort (keys $commands->%*)) {
    my $command = $commands->{$command_name};
    my $collection_name = $command->{collection}->name;
    print "$command_name - $collection_name\n";
  }
  return 0;
}
;

# ------------------------------------------------------------------------

sub do_pull {
  foreach my $name ( @ARGV ) {
    if ( $name eq "*" ) {
      foreach my $collection ( @all_collections ) {
	$collection->do_pull;
      }
    } else {
      my $collection = $commands->{$name}->{collection};
      if (!defined($collection)) {
	die "Command not found: $name";
      }
      $collection->do_pull;
    }
  }
  return 0;
}

# ------------------------------------------------------------------------

sub do_exec {

  # this is odd: "howto -s -c cmd" isn't valid.
  
  my $exec_cmd = shift @ARGV;
  if (!defined($exec_cmd)) {
    usage(1);
  }
  my $alt_cmd = $exec_cmd;
  if ( $opt_c ) { $alt_cmd = $opt_c; }
  my $command = $commands->{$alt_cmd};
  if ( !defined($command) ) {
    die "Command not found: $alt_cmd,";
  }
  my $collection = $command->{collection};

  my @exec_args;
  if ( $opt_s ) {
    $exec_cmd = "/bin/bash";
    @exec_args = ();
  } else {
    # $exec_cmd = $exec_cmd;
    @exec_args = @ARGV;
  }

  if (!$opt_q) {
    print STDERR "### $collection->{name}\n";
  }

  my $error = $collection->do_exec($command,$exec_cmd,@exec_args);

  return $error;
}


# ------------------------------------------------------------------------
# Execute the command
# ------------------------------------------------------------------------

my $exit_stat;
if ( $opt_l ) {
  $exit_stat = do_list();
} elsif ( $opt_p ) {
  $exit_stat = do_pull();
} else {
  $exit_stat = do_exec();
}
exit($exit_stat);

# ------------------------------------------------------------------------
# Routine for executing subcommands
# ------------------------------------------------------------------------

sub run {
  diag(join(" ","++",@_));
  my $stat;
  if ( $opt_n ) {
    $stat = 0;
  } else {
    $stat = system(@_);
  }
  # copied from perlfunc(1)
  if ($? == -1) {
    print STDERR "### failed to execute: $!\n";
  } elsif ($? & 127) {
    printf STDERR  "### child died with signal %d, %s coredump\n",
      ($? & 127),  ($? & 128) ? 'with' : 'without';
  }
  return ($? >> 8);
}

# ------------------------------------------------------------------------
# Darwin specific hacks
# ------------------------------------------------------------------------

my $darwin_socat_pid;

sub darwin_x11_args {
  # fixme: hard coded path is ugly!
  if ( ! -e "/usr/local/bin/socat" ) {
    die "\"socat\" is required for GUI apps, but was not found.";
  }

  # Find an IP.
  my $ip;
  for (my $i=0; !defined($ip); $i++) {
    open(my $fh, "-|", "ifconfig en$i 2>&1") || die;
    while (<$fh>) {
      chomp;
      if ( /^ifconfig: interface en[0-9]+ does not exist/ ) {
	die "Need an IP address to continue,";
      }
      if ( /^\tinet +([0-9.]+) +/ ) {
	$ip = $1;
	last;
      }
    }
    close $fh;
  }

  # Start socat
  use POSIX;
  my $pid = fork();
  if (!defined($pid)) {
    die "cannot fork,";
  }
  if ( $pid == 0 ) {
    # Child
    my $DISPLAY = $ENV{DISPLAY};
    close STDERR;
    close STDOUT;
    exec("socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\\\"$DISPLAY\\\"");
    die "Whoops. This should never be reached,";
  } else {
    # Parent
    diag("# starting socat, pid $pid");
    $darwin_socat_pid = $pid;
    sleep 1;			# fixme: ugly hack.
    return ("-e", "DISPLAY=$ip:0");
  }
}

# fixme: should recognize when socat dies.


sub darwin_x11_cleanup {
  # Shutdown socat
  my $pid = $darwin_socat_pid;
  if (!defined($pid)) { return; }
  diag("# stopping socat, pid $pid");
  kill 'QUIT', $pid;
  wait(); # fixme: is this safe?
}

sub diag {
  if ( !$opt_v ) { return; }
  print STDERR @_,"\n";
}

END {
  # fixme: is this safe?
  darwin_x11_cleanup();
}
